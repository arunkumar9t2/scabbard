{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scabbard \u00b6 A tool to visualize and understand your Dagger 2 dependency graph. Your browser does not support the video tag. More advanced examples . Features \u00b6 Visualize entry points, dependency graph, dagger errors, component relationships and scopes in your Dagger 2 setup. Minimal setup - Scabbard's Gradle plugin prepares your project for graph generation and provides ability to customize graph generation behavior. IDE integration - Easily view a @Component or a @Subcomponnet graph directly from source code via gutter icons (IntelliJ/Android Studio). Supports both Kotlin and Java. Supports Dagger Hilt and Anvil What's new Recent additions include support for Dagger Hilt, Anvil, Open SVG s in browser and visualizing missing binding errors from Dagger. For more details, see Releases . How it works? \u00b6 Scabbard gradle plugin registers a Dagger SPI plugin to your project and during build it generates graph images based on your dagger setup. An IntelliJ/Android Studio plugin is also provided that links the generated file to editor for fast access. Getting Started \u00b6 Requirements \u00b6 Scabbard uses GraphViz to generate graphs and hence requires dot command to be available for it to work. Installation instructions \u00b6 Mac Install via homebrew . brew install graphviz Linux Install via apt. sudo apt-get install graphviz Windows Install via GraphViz installer or with Chocolatey by choco install graphviz After installation, verify installation by executing dot -V , example: dot - graphviz version 2.38.0 (20140413.2041) Installation \u00b6 Scabbard has two major components: Scabbard Gradle Plugin - Configures project to generate Dagger images during build. Scabbard IntelliJ Plugin (Optional) - Helps to link the generated images back to editor via gutter icons/error logs. Gradle Plugin \u00b6 Sample PR to add Scabbard to a project: https://github.com/arunkumar9t2/scabbard-sample/pull/1/files Using the plugins DSL: Groovy plugins { id \"scabbard.gradle\" version \"0.5.0\" } Kotlin plugins { id ( \"scabbard.gradle\" ) version \"0.5.0\" } or if you are using older versions of Gradle: Groovy buildscript { repositories { maven { url \"https://plugins.gradle.org/m2/\" } } dependencies { classpath \"gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.5.0\" } } apply plugin: \"scabbard.gradle\" Kotlin buildscript { repositories { maven { url = uri ( \"https://plugins.gradle.org/m2/\" ) } } dependencies { classpath ( \"gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.5.0\" ) } } apply ( plugin = \"scabbard.gradle\" ) After applying the plugin, configure the plugin by adding a scabbard block: Groovy scabbard { enabled true } Kotlin scabbard { enabled = true } Configuring Scabbard for multi-module projects For multi-module projects, apply Scabbard plugin in root project's build.gradle file. Doing so will let the plugin configure all subprojects for graph generation. In root build.gradle file: Groovy apply plugin: \"scabbard.gradle\" scabbard { enabled true outputFormat \"svg\" } Kotlin apply ( plugin = \"scabbard.gradle\" ) scabbard { enabled = true outputFormat = \"svg\" } Success That's it. Now after building the project, Scabbard would have generated dot and ( png or svg ) files for your Dagger components in your build folder. The default output directory is location defined by StandardLocation.SOURCE_OUTPUT . Java : build/generated/sources/annotationProcessors/java/$sourceSet/scabbard Kotlin : build/generated/source/kapt/$sourceSet/scabbard/ In IDE, the generated images can be found as part of java (generated) source set. Android Studio/Idea Plugin \u00b6 Scabbard also ships an IDE plugin to open generated images directly from your source code via gutter icons. Please install plugins from File > Preferences/Settings > Plugins > Market Place > Search for \"Scabbard\" > Install and Restart. Alternatively you could download the plugin zip file directly from releases and install via File > Preferences/Settings > Plugins > Gear \u2699 > Install from Disk and point to zip file. Success The plugin should automatically add an icon next to @Component , @Subcomponent , @Module or @ContributesAndroidInjector as soon as project is indexed. Other build systems \u00b6 Scabbard at its core is just an annotation processor and as long as it is available alongside Dagger in the classpath, it should generate images. For configuring other build systems, please see setup guide . Resources \u00b6 Configuration FAQ Cheat Sheet Examples Contributing License \u00b6 Copyright 2020 Arunkumar Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#scabbard","text":"A tool to visualize and understand your Dagger 2 dependency graph. Your browser does not support the video tag. More advanced examples .","title":"Scabbard"},{"location":"#features","text":"Visualize entry points, dependency graph, dagger errors, component relationships and scopes in your Dagger 2 setup. Minimal setup - Scabbard's Gradle plugin prepares your project for graph generation and provides ability to customize graph generation behavior. IDE integration - Easily view a @Component or a @Subcomponnet graph directly from source code via gutter icons (IntelliJ/Android Studio). Supports both Kotlin and Java. Supports Dagger Hilt and Anvil What's new Recent additions include support for Dagger Hilt, Anvil, Open SVG s in browser and visualizing missing binding errors from Dagger. For more details, see Releases .","title":"Features"},{"location":"#how-it-works","text":"Scabbard gradle plugin registers a Dagger SPI plugin to your project and during build it generates graph images based on your dagger setup. An IntelliJ/Android Studio plugin is also provided that links the generated file to editor for fast access.","title":"How it works?"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#requirements","text":"Scabbard uses GraphViz to generate graphs and hence requires dot command to be available for it to work.","title":"Requirements"},{"location":"#installation-instructions","text":"Mac Install via homebrew . brew install graphviz Linux Install via apt. sudo apt-get install graphviz Windows Install via GraphViz installer or with Chocolatey by choco install graphviz After installation, verify installation by executing dot -V , example: dot - graphviz version 2.38.0 (20140413.2041)","title":"Installation instructions"},{"location":"#installation","text":"Scabbard has two major components: Scabbard Gradle Plugin - Configures project to generate Dagger images during build. Scabbard IntelliJ Plugin (Optional) - Helps to link the generated images back to editor via gutter icons/error logs.","title":"Installation"},{"location":"#gradle-plugin","text":"Sample PR to add Scabbard to a project: https://github.com/arunkumar9t2/scabbard-sample/pull/1/files Using the plugins DSL: Groovy plugins { id \"scabbard.gradle\" version \"0.5.0\" } Kotlin plugins { id ( \"scabbard.gradle\" ) version \"0.5.0\" } or if you are using older versions of Gradle: Groovy buildscript { repositories { maven { url \"https://plugins.gradle.org/m2/\" } } dependencies { classpath \"gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.5.0\" } } apply plugin: \"scabbard.gradle\" Kotlin buildscript { repositories { maven { url = uri ( \"https://plugins.gradle.org/m2/\" ) } } dependencies { classpath ( \"gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.5.0\" ) } } apply ( plugin = \"scabbard.gradle\" ) After applying the plugin, configure the plugin by adding a scabbard block: Groovy scabbard { enabled true } Kotlin scabbard { enabled = true } Configuring Scabbard for multi-module projects For multi-module projects, apply Scabbard plugin in root project's build.gradle file. Doing so will let the plugin configure all subprojects for graph generation. In root build.gradle file: Groovy apply plugin: \"scabbard.gradle\" scabbard { enabled true outputFormat \"svg\" } Kotlin apply ( plugin = \"scabbard.gradle\" ) scabbard { enabled = true outputFormat = \"svg\" } Success That's it. Now after building the project, Scabbard would have generated dot and ( png or svg ) files for your Dagger components in your build folder. The default output directory is location defined by StandardLocation.SOURCE_OUTPUT . Java : build/generated/sources/annotationProcessors/java/$sourceSet/scabbard Kotlin : build/generated/source/kapt/$sourceSet/scabbard/ In IDE, the generated images can be found as part of java (generated) source set.","title":"Gradle Plugin"},{"location":"#android-studioidea-plugin","text":"Scabbard also ships an IDE plugin to open generated images directly from your source code via gutter icons. Please install plugins from File > Preferences/Settings > Plugins > Market Place > Search for \"Scabbard\" > Install and Restart. Alternatively you could download the plugin zip file directly from releases and install via File > Preferences/Settings > Plugins > Gear \u2699 > Install from Disk and point to zip file. Success The plugin should automatically add an icon next to @Component , @Subcomponent , @Module or @ContributesAndroidInjector as soon as project is indexed.","title":"Android Studio/Idea Plugin"},{"location":"#other-build-systems","text":"Scabbard at its core is just an annotation processor and as long as it is available alongside Dagger in the classpath, it should generate images. For configuring other build systems, please see setup guide .","title":"Other build systems"},{"location":"#resources","text":"Configuration FAQ Cheat Sheet Examples Contributing","title":"Resources"},{"location":"#license","text":"Copyright 2020 Arunkumar Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"cheat-sheet/","text":"Cheet sheet \u00b6 Below is the base graph from scabbard-sample which contains all types of bindings. A better version of cheet sheet is planned.","title":"Cheat Sheet"},{"location":"cheat-sheet/#cheet-sheet","text":"Below is the base graph from scabbard-sample which contains all types of bindings. A better version of cheet sheet is planned.","title":"Cheet sheet"},{"location":"configuration/","text":"Configuration \u00b6 Gradle plugin \u00b6 The scabbard plugin can be configured in following ways and is the entry point for customizing scabbard processor behavior. Configuration Examples Example gradle build script configurations. Android Kotlin project Java library project with KTS build script Enable Scabbard processor \u00b6 Groovy scabbard { enabled true // default false } Kotlin scabbard { enabled = true // default false } Fail build on any error in Scabbard processor \u00b6 Groovy scabbard { failOnError true // default false } Kotlin scabbard { failOnError = true // default false } By default, Scabbard processor does not fail the build should any error occur. This flag could be used to change that behavior. Enable full binding graph validation \u00b6 Groovy scabbard { fullBindingGraphValidation true // default false } Kotlin scabbard { fullBindingGraphValidation = true // default false } Enables Dagger's full binding graph validation which validates the entire graph including all bindings in every @Component , @Subcomponent and @Module . This enables highlighting missing bindings which can be used to understand errors. Additionally since @Module itself is seen a graph, graphs will be generated for bindings in a @Module . Qualified Names \u00b6 Since 0.2.0 , Scabbard uses simple names in graph images to keep the graph short. The qualified names behaviour could be restored as follows. Groovy scabbard { qualifiedNames true // default false } Kotlin scabbard { qualifiedNames = true // default false } Output format \u00b6 Supported output formats for generated images are png and svg . Groovy scabbard { outputFormat \"png\" // default png } Kotlin scabbard { outputFormat = \"svg\" // default png } Other build systems \u00b6 Although Scabbard integrates well with Gradle, other build systems are supported in limited capacity. The majority of the work is done by Scabbard's annotation processor available on mavenCentral with the following maven coordinates: dev.arunkumar:scabbard-processor:0.5.0 . The annotation processor behavior can be customized by passing the following Java compiler properties. Java Compiler Property Values Behavior -Ascabbard.failOnError true , false Link -Ascabbard.qualifiedNames true , false Link -Ascabbard.outputFormat png , svg Link Info When using the Gradle plugin, all these options are abstracted into type safe plugin configuration DSL, hence most of them this is of less concern for Gradle users. Maven \u00b6 For Maven projects, add Scabbard's annotation processor dependency alongside Dagger as shown below. Full working sample . <repositories> <repository> <id> central </id> <name> Maven Central </name> <layout> default </layout> <url> https://repo1.maven.org/maven2 </url> </repository> </repositories> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.6.1 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <annotationProcessorPaths> <path> <groupId> com.google.dagger </groupId> <artifactId> dagger-compiler </artifactId> <version> 2.28 </version> </path> <path> <groupId> dev.arunkumar </groupId> <artifactId> scabbard-processor </artifactId> <version> 0.5.0 </version> </path> </annotationProcessorPaths> <compilerArgs> <arg> -Ascabbard.outputFormat=svg </arg> </compilerArgs> </configuration> </plugin> </plugins> </build> After running a build, the images should be available in build/generated/sources/annotationProcessor/java/main .","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#gradle-plugin","text":"The scabbard plugin can be configured in following ways and is the entry point for customizing scabbard processor behavior. Configuration Examples Example gradle build script configurations. Android Kotlin project Java library project with KTS build script","title":"Gradle plugin"},{"location":"configuration/#enable-scabbard-processor","text":"Groovy scabbard { enabled true // default false } Kotlin scabbard { enabled = true // default false }","title":"Enable Scabbard processor"},{"location":"configuration/#fail-build-on-any-error-in-scabbard-processor","text":"Groovy scabbard { failOnError true // default false } Kotlin scabbard { failOnError = true // default false } By default, Scabbard processor does not fail the build should any error occur. This flag could be used to change that behavior.","title":"Fail build on any error in Scabbard processor"},{"location":"configuration/#enable-full-binding-graph-validation","text":"Groovy scabbard { fullBindingGraphValidation true // default false } Kotlin scabbard { fullBindingGraphValidation = true // default false } Enables Dagger's full binding graph validation which validates the entire graph including all bindings in every @Component , @Subcomponent and @Module . This enables highlighting missing bindings which can be used to understand errors. Additionally since @Module itself is seen a graph, graphs will be generated for bindings in a @Module .","title":"Enable full binding graph validation"},{"location":"configuration/#qualified-names","text":"Since 0.2.0 , Scabbard uses simple names in graph images to keep the graph short. The qualified names behaviour could be restored as follows. Groovy scabbard { qualifiedNames true // default false } Kotlin scabbard { qualifiedNames = true // default false }","title":"Qualified Names"},{"location":"configuration/#output-format","text":"Supported output formats for generated images are png and svg . Groovy scabbard { outputFormat \"png\" // default png } Kotlin scabbard { outputFormat = \"svg\" // default png }","title":"Output format"},{"location":"configuration/#other-build-systems","text":"Although Scabbard integrates well with Gradle, other build systems are supported in limited capacity. The majority of the work is done by Scabbard's annotation processor available on mavenCentral with the following maven coordinates: dev.arunkumar:scabbard-processor:0.5.0 . The annotation processor behavior can be customized by passing the following Java compiler properties. Java Compiler Property Values Behavior -Ascabbard.failOnError true , false Link -Ascabbard.qualifiedNames true , false Link -Ascabbard.outputFormat png , svg Link Info When using the Gradle plugin, all these options are abstracted into type safe plugin configuration DSL, hence most of them this is of less concern for Gradle users.","title":"Other build systems"},{"location":"configuration/#maven","text":"For Maven projects, add Scabbard's annotation processor dependency alongside Dagger as shown below. Full working sample . <repositories> <repository> <id> central </id> <name> Maven Central </name> <layout> default </layout> <url> https://repo1.maven.org/maven2 </url> </repository> </repositories> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.6.1 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> <annotationProcessorPaths> <path> <groupId> com.google.dagger </groupId> <artifactId> dagger-compiler </artifactId> <version> 2.28 </version> </path> <path> <groupId> dev.arunkumar </groupId> <artifactId> scabbard-processor </artifactId> <version> 0.5.0 </version> </path> </annotationProcessorPaths> <compilerArgs> <arg> -Ascabbard.outputFormat=svg </arg> </compilerArgs> </configuration> </plugin> </plugins> </build> After running a build, the images should be available in build/generated/sources/annotationProcessor/java/main .","title":"Maven"},{"location":"contributing/","text":"Contributing to Scabbard \u00b6 If you would like to contribute to Scabbard you can do so through GitHub by forking the repository and sending a pull request. Contributions of any kind from features, documentation, typo fixes and tests are welcome. Running Scabbard locally \u00b6 After the cloning the repo, the project could be built by ./gradlew assemble command. Scabbard also ships with IDE configurations for common tasks. Run Scabbard Processor - Runs the annotation processor on samples:android-kotlin project. After build, graphs should have generated. Debug Scabbard Processor - Starts a gradle build for debugging and waits for debugger to be attached. Please run Attach Scabbard Debugger config to attach the debugger. Breakpoints and step through should work normally. Run Scabbard IntelliJ Plugin - Builds the plugin and opens an IntelliJ instance that has the plugin applied. Workflow \u00b6 Code style and language \u00b6 Unless otherwise mentioned new modules are preferred to be written in Kotlin. Project uses default AS/IntelliJ code style with 2 spaces for indents. New issues \u00b6 Please search for any related issues that might already answer your concern before creating new issues. Keeping the discussion focused help us avoid getting side tracked. Pull requests \u00b6 For major changes like new features, please open an issue so that we can agree on the direction before raising pull requests. Small pull requests for trivial stuff are always welcome. Tests for new code are greatly appreciated. Please ensure ./gradlew check passes before submitting PR.","title":"Contributing"},{"location":"contributing/#contributing-to-scabbard","text":"If you would like to contribute to Scabbard you can do so through GitHub by forking the repository and sending a pull request. Contributions of any kind from features, documentation, typo fixes and tests are welcome.","title":"Contributing to Scabbard"},{"location":"contributing/#running-scabbard-locally","text":"After the cloning the repo, the project could be built by ./gradlew assemble command. Scabbard also ships with IDE configurations for common tasks. Run Scabbard Processor - Runs the annotation processor on samples:android-kotlin project. After build, graphs should have generated. Debug Scabbard Processor - Starts a gradle build for debugging and waits for debugger to be attached. Please run Attach Scabbard Debugger config to attach the debugger. Breakpoints and step through should work normally. Run Scabbard IntelliJ Plugin - Builds the plugin and opens an IntelliJ instance that has the plugin applied.","title":"Running Scabbard locally"},{"location":"contributing/#workflow","text":"","title":"Workflow"},{"location":"contributing/#code-style-and-language","text":"Unless otherwise mentioned new modules are preferred to be written in Kotlin. Project uses default AS/IntelliJ code style with 2 spaces for indents.","title":"Code style and language"},{"location":"contributing/#new-issues","text":"Please search for any related issues that might already answer your concern before creating new issues. Keeping the discussion focused help us avoid getting side tracked.","title":"New issues"},{"location":"contributing/#pull-requests","text":"For major changes like new features, please open an issue so that we can agree on the direction before raising pull requests. Small pull requests for trivial stuff are always welcome. Tests for new code are greatly appreciated. Please ensure ./gradlew check passes before submitting PR.","title":"Pull requests"},{"location":"examples/","text":"Examples \u00b6 Please download/open in new tab to zoom contents. Coffee App from Dagger \u00b6 Google I/O 2019 App \u00b6 Your browser does not support the video tag. Component Hierarchies \u00b6 Scabbard can also visualize component hierarchies as shown below. AppComponent \u00b6 dagger.hilt \u00b6 Interactive SVG: dagger.android \u00b6 Interactive SVG: Santa Tracker \u00b6 AppComponent \u00b6 Plaid \u00b6 HomeComponent \u00b6 UpvoteStoryServiceComponent \u00b6","title":"Examples"},{"location":"examples/#examples","text":"Please download/open in new tab to zoom contents.","title":"Examples"},{"location":"examples/#coffee-app-from-dagger","text":"","title":"Coffee App from Dagger"},{"location":"examples/#google-io-2019-app","text":"Your browser does not support the video tag.","title":"Google I/O 2019 App"},{"location":"examples/#component-hierarchies","text":"Scabbard can also visualize component hierarchies as shown below.","title":"Component Hierarchies"},{"location":"examples/#appcomponent","text":"","title":"AppComponent"},{"location":"examples/#daggerhilt","text":"Interactive SVG:","title":"dagger.hilt"},{"location":"examples/#daggerandroid","text":"Interactive SVG:","title":"dagger.android"},{"location":"examples/#santa-tracker","text":"","title":"Santa Tracker"},{"location":"examples/#appcomponent_1","text":"","title":"AppComponent"},{"location":"examples/#plaid","text":"","title":"Plaid"},{"location":"examples/#homecomponent","text":"","title":"HomeComponent"},{"location":"examples/#upvotestoryservicecomponent","text":"","title":"UpvoteStoryServiceComponent"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Have a question that isn't part of the FAQ? Please search Github Issues . Does it support mixed Kotlin/Java projects? \u00b6 Yes. What is the impact on binary size? \u00b6 There should be no impact since Scabbard only runs during compilation and generated images are not meant to be packaged into binary. You could control if Scabbard is enabled for release builds via scabbard { enabled = false } block. Tip For Android, one way to disable Scabbard for release builds is by simply flipping the enabled property in Gradle plugin extension as follows. scabbard { enabled ! gradle . startParameter . toString (). contains ( \"assembleRelease\" ) } What is the impact on build time? \u00b6 Scabbard processor uses standard annotation processing APIs to generate images. This lets the processor be cacheable and does not run when inputs have not changed. Currently there are no benchmark available and more work is expected to be done in performance area. How can I understand the generated graph? \u00b6 Please refer to Scabbard cheat sheet . I don't see gutter icons to view graph. \u00b6 Please ensure you have built the project once and wait for Android Studio/IntelliJ indexing to be done for gutter icons to be visible. Even after indexing if the icons are not visible, please file an issue. The common causes for missing gutter icons are Images are generated but IntelliJ index cache is corrupted. Please try Invalidate Cache and Restart to reindex the files. Image are not generated. Please enable scabbard.failOnError and observe Gradle build log for any errors. You could also manually look for generated images in the build folder as described here . Any other format for visualizing the dependency graph? \u00b6 Some other graph formats being considered are: Single graph : Instead of splitting the graph into multiple files, render all nodes in single file #6 .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"Have a question that isn't part of the FAQ? Please search Github Issues .","title":"Frequently Asked Questions"},{"location":"faq/#does-it-support-mixed-kotlinjava-projects","text":"Yes.","title":"Does it support mixed Kotlin/Java projects?"},{"location":"faq/#what-is-the-impact-on-binary-size","text":"There should be no impact since Scabbard only runs during compilation and generated images are not meant to be packaged into binary. You could control if Scabbard is enabled for release builds via scabbard { enabled = false } block. Tip For Android, one way to disable Scabbard for release builds is by simply flipping the enabled property in Gradle plugin extension as follows. scabbard { enabled ! gradle . startParameter . toString (). contains ( \"assembleRelease\" ) }","title":"What is the impact on binary size?"},{"location":"faq/#what-is-the-impact-on-build-time","text":"Scabbard processor uses standard annotation processing APIs to generate images. This lets the processor be cacheable and does not run when inputs have not changed. Currently there are no benchmark available and more work is expected to be done in performance area.","title":"What is the impact on build time?"},{"location":"faq/#how-can-i-understand-the-generated-graph","text":"Please refer to Scabbard cheat sheet .","title":"How can I understand the generated graph?"},{"location":"faq/#i-dont-see-gutter-icons-to-view-graph","text":"Please ensure you have built the project once and wait for Android Studio/IntelliJ indexing to be done for gutter icons to be visible. Even after indexing if the icons are not visible, please file an issue. The common causes for missing gutter icons are Images are generated but IntelliJ index cache is corrupted. Please try Invalidate Cache and Restart to reindex the files. Image are not generated. Please enable scabbard.failOnError and observe Gradle build log for any errors. You could also manually look for generated images in the build folder as described here .","title":"I don't see gutter icons to view graph."},{"location":"faq/#any-other-format-for-visualizing-the-dependency-graph","text":"Some other graph formats being considered are: Single graph : Instead of splitting the graph into multiple files, render all nodes in single file #6 .","title":"Any other format for visualizing the dependency graph?"},{"location":"features/","text":"Features \u00b6 Gutter Icons \u00b6 Gutter icons to view generated images for @Component and @Subcomponent Visualize Component Hierarchy \u00b6 For every @Component , Scabbard generates a component heirarchy image with unique color for each scope. Interactive SVG graphs \u00b6 When SVG graphs generated by Scabbard are opened in the browser, it is possible to navigate between @Component and @Subcomponent by simple clicking on the node as show below. Your browser does not support the video tag. You can use gutter icon to directly open the image in browser. Missing binding visualization \u00b6 Scabbard adds hypelink to component name in console log whenever Dagger's missing binding error is detected. This hypelink can be used to open full binding graph image which contains missing binding information. This requires full binding graph validation to be enabled. Your browser does not support the video tag. Hilt and Anvil Support \u00b6 Scabbard adds gutter icons to both Hilt and Anvil's component abstractions. Anvil \u00b6 Hilt \u00b6","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#gutter-icons","text":"Gutter icons to view generated images for @Component and @Subcomponent","title":"Gutter Icons"},{"location":"features/#visualize-component-hierarchy","text":"For every @Component , Scabbard generates a component heirarchy image with unique color for each scope.","title":"Visualize Component Hierarchy"},{"location":"features/#interactive-svg-graphs","text":"When SVG graphs generated by Scabbard are opened in the browser, it is possible to navigate between @Component and @Subcomponent by simple clicking on the node as show below. Your browser does not support the video tag. You can use gutter icon to directly open the image in browser.","title":"Interactive SVG graphs"},{"location":"features/#missing-binding-visualization","text":"Scabbard adds hypelink to component name in console log whenever Dagger's missing binding error is detected. This hypelink can be used to open full binding graph image which contains missing binding information. This requires full binding graph validation to be enabled. Your browser does not support the video tag.","title":"Missing binding visualization"},{"location":"features/#hilt-and-anvil-support","text":"Scabbard adds gutter icons to both Hilt and Anvil's component abstractions.","title":"Hilt and Anvil Support"},{"location":"features/#anvil","text":"","title":"Anvil"},{"location":"features/#hilt","text":"","title":"Hilt"}]}